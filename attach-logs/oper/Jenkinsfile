node {

    def cleanupWorkspace = true
    def pkg = 'github.com/attach-live/attach-logs'
    def pkgDir = env.WORKSPACE + '/attach-logs'
    def gitUrl = 'git@github.com:attach-live/attach-logs.git'
    def branch = params.branch
    def goDir = '/usr/local/go'
    def lintDir = env.WORKSPACE + "/golangci-lint"

    def gitObj
    stage('Checkout') {
        currentBuild.displayName += " ($branch)"

        if(cleanupWorkspace){
            deleteDir()
        }

        dir(pkgDir) {
            gitObj = git branch: branch, url: gitUrl
        }
    }

    def customEnv = [
        "TEST_DB=postgresql://al@cured-pc2:26257/aldb?sslmode=disable",
        "PATH=${PATH}:${goDir}/bin",
        "GOPATH=${env.WORKSPACE}/gopath",
        "BUILD_COMMIT=${gitObj.GIT_COMMIT}",
        "BUILD_BRANCH=${gitObj.GIT_BRANCH}",
    ]
    stage('Lint') {
        try {
            withEnv(customEnv) {
                sh 'mkdir -p ' + lintDir
                dir(lintDir) {
                    sh 'curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s v1.14.0'
                }
                dir(pkgDir) {
                    sh 'PATH=$PATH:$GOPATH/bin:'+lintDir+'/bin make lint'
                }
            }
        } catch (Exception){
           currentBuild.result = 'UNSTABLE'
        }
    }

    stage('Test and coverage') {
        withEnv(customEnv) {
            dir(pkgDir) {
                sh 'TEST_DB=postgresql://al@cured-pc2:26257/aldb?sslmode=disable PATH=$PATH:$GOPATH/bin make gocov-html'
                publishHTML (target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: 'build/gocov',
                    reportFiles: 'coverage.html',
                    reportName: "gocov-report"
                ])
            }
        }
    }

    stage('Build') {
        withEnv(customEnv) {
            dir(pkgDir) {
                sh 'PATH=$PATH:$GOPATH/bin make build'
            }
        }
    }
}